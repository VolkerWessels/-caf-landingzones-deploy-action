name: 'CAF landing zone deployment'
description: 'VolkerWessels biased CAF landing zone deployment'
inputs:
  address:
    description: 'The address to use with rover state show, list or rm'
    required: false
  branch:
    description: 'The branch of the caf-terraform-landingzones repository'
    default: vw-combined
    required: false
  action:
    description: 'CAF terraform action to run. One of (validate, init, plan, apply, show, list, rm or destroy)'
    required: true
  config_dir:
    description: 'A directory in `github.workspace` containing config (*.tfvar) files.'
    required: true
  environment:
    description: 'The environment variable used in Azure tags'
    required: true
  prefix:
    description: 'The prefix variable used in Azure naming'
    required: true
  landingzone:
    description: 'the segment of a cloud environment to deploy'
    required: true
  level:
    description: 'Deploy level'
    required: true
  subscription_name:
    description: 'Name of the subscription the landingzone should be deployed in'
    required: false
  tags:
    description: 'Json string of tags to import'
    required: false
  tfstate:
    description: 'File name for tfstate'
    required: false
  spkvurl:
    description: 'Keyvault url for service principal impersonation'
    required: false
  solution:
    description: 'caf_landingzones logic to use'
    required: false
  disablevmextensions: 
    description: 'disable vm and vmss extensions in the landingzone to speed up the run'
    required: false
  workspace: 
    description: 'tf_var_WORKSPACE'
    required: false
runs:
  using: "composite"
  steps:
    - run: |
        LZ_NAME=${{inputs.landingzone}};
        BASE_PATH=$(dirname ${{ inputs.config_dir }});
        echo "LANDINGZONE_NAME=${LZ_NAME////-}" >> $GITHUB_ENV;
        echo "GITHUB_ACTION_PATH=${GITHUB_ACTION_PATH}" >> $GITHUB_ENV;
        echo "TFVARS_PATH=${{ inputs.config_dir }}" >> $GITHUB_ENV;
        echo "BASE_PATH=${BASE_PATH}" >> $GITHUB_ENV;
        echo "TF_DATA_DIR=${GITHUB_WORKSPACE}" >> $GITHUB_ENV;
        echo "TF_PLUGIN_CACHE_DIR=${GITHUB_WORKSPACE}/plugin-cache" >> $GITHUB_ENV;
      shell: bash
    - name: Download artifacts if applicable
      if: ${{ inputs.action == 'apply' }}
      uses: actions/download-artifact@v2
      with:
        name: terraform-${{ env.LANDINGZONE_NAME }}-plan
        path: ${{ env.BASE_PATH }}/
    # - name: Terraform Cache
    #   id: terraform-cache
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       ${{ env.TF_PLUGIN_CACHE_DIR }}
    #     key: ${{ runner.os }}-terraform-${{ inputs.prefix }}-${{ inputs.environment }}-${{ github.run_id }}
    #     # restore-keys: |
    #     #   ${{ runner.os }}-terraform-${{ inputs.prefix }}-${{ inputs.environment }}-${{ github.run_id }}
    - name: Install landingzones
      run: make landingzones
      shell: bash
      working-directory: ${{ env.GITHUB_ACTION_PATH }}
      env:
        TF_LZ_GIT: https://github.com/VolkerWessels/caf-terraform-landingzones.git
        TF_LZ_BRANCH: ${{ inputs.branch }}
        DISABLEVMEXTENSIONS: ${{ inputs.disablevmextensions }}
    - name: Azure login with service principal
      run: make login
      env:
        ARM_SUBSCRIPTION_NAME: ${{ inputs.subscription_name }}
      working-directory: ${{ env.GITHUB_ACTION_PATH }}
      shell: bash
    - name: Create tags file with jq and move it to the solution folder
      run: make tags TAGS=$( echo -n "${{ inputs.tags }}" | base64 -w 0) LANDINGZONE=${{ inputs.landingzone }} LEVEL=${{ inputs.level }}
      working-directory: ${{ env.GITHUB_ACTION_PATH }}
      shell: bash
    - name: Run ${{ inputs.action }}
      id: solution-deployment
      run: |
        make ${{ inputs.action }} LANDINGZONE=${{ inputs.landingzone }} LEVEL=${{ inputs.level }} | tee deploy.log;
        echo 'SOLUTION_DEPLOYMENT_OUTPUT<<EOF' >> $GITHUB_ENV
        numberoflines=$(grep -c "^.*$" deploy.log) 
        if [ "$numberoflines" -gt 1000 ]; then 
          echo "Plan over 1000 lines, check the action" >> $GITHUB_ENV
        else
          sed -n --expression='/Terraform will perform the following actions:/,$p' deploy.log >> $GITHUB_ENV
        fi
        echo 'EOF' >> $GITHUB_ENV
      working-directory: ${{ env.GITHUB_ACTION_PATH }}
      env:
        PREFIX: ${{ inputs.prefix }}
        ENVIRONMENT: ${{ inputs.environment }}
        TFSTATE: ${{ inputs.tfstate }}
        SPKVURL: ${{ inputs.spkvurl }}
        SOLUTION: ${{ inputs.solution }}
        TF_VAR_workspace: ${{ inputs.workspace }}
        ADDRESS: ${{ inputs.address }}
      shell: bash
    - name: Update Pull Request
      uses: actions/github-script@v6
      if: ${{ inputs.action == 'plan' && github.event_name == 'pull_request'}}      
      with:
        script: |
          const output = `#### Name: \`${{ inputs.landingzone }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.solution-deployment.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.SOLUTION_DEPLOYMENT_OUTPUT}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })     
    - name: Logout service principal
      run: make logout
      working-directory: ${{ env.GITHUB_ACTION_PATH }}
      shell: bash
    - name: Store tfplan
      if: ${{ inputs.action == 'plan'}}
      uses: actions/upload-artifact@v2
      with:
        name: terraform-${{ env.LANDINGZONE_NAME }}-plan
        path: |
          ${{ env.BASE_PATH }}/*.tfplan
        if-no-files-found: error
    
